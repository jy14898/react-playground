{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["parser","peg","generate","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","value","_ref","target","setState","result","mapResult","react_default","a","createElement","map","v","i","key","color","op","bracket","int","tag","style","parse","e","message","reactstrap_es","type","onChange","handleChange","bind","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qQAQMA,SAASC,EAAIC,SAAJ,qeAsEAC,cA9BX,SAAAA,EAAaC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IAChBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAEDQ,MAAQ,CACTC,MAAO,WAJKR,+EASY,IAATQ,EAASC,EAAjBC,OAAQF,MACnBL,KAAKQ,SAAS,CAAEH,2CAIhB,IAAII,EAAS,GACb,IACIA,EA7BZ,SAASC,EAAWL,GAChB,GAAI,QAASA,EACT,OAAOM,EAAAC,EAAAC,cAAA,YAAOR,EAAMS,IAAI,SAACC,EAAEC,GAAH,OAASL,EAAAC,EAAAC,cAAA,QAAMI,IAAKD,GAAIN,EAAUK,OAE1D,IAAMG,EAAQ,CACVC,GAAM,MACNC,QAAW,QACXC,IAAO,QACThB,EAAMiB,KACR,OAAOX,EAAAC,EAAAC,cAAA,QAAMU,MAAO,CAACL,UAASb,EAAMU,GAoBvBL,CAAUlB,EAAOgC,MAAMxB,KAAKI,MAAMC,QAC7C,MAAOoB,GACLhB,EAASgB,EAAEC,QAGf,OACIf,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACc,EAAA,EAAD,CAAOC,KAAK,OAAOvB,MAAOL,KAAKI,MAAMC,MAAOwB,SAAU7B,KAAK8B,aAAaC,KAAK/B,QAC5ES,UAzBCuB,aCrCEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAO5B,EAAAC,EAAAC,cAAC2B,EAAD,MAASC,SAASC,eAAe,SDmH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.c65665c0.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport {\n    Input,\n} from 'reactstrap';\n\nimport peg from 'pegjs';\n\nconst parser = peg.generate(`\n{\n    function tag(v, t) {\n        return { v: v, tag: t };\n    }\n\n    function op(v) { return tag(v,\"op\") }\n    function bracket(v) { return tag(v,\"bracket\") }\n    function int_(v) { return tag(v,\"int\") }\n}\n\nExpr\n  = Term (v:(\"+\"/\"-\") {return op(v)}) Term \n  / Term\n\nTerm \n  = Factor (v:\"*\" {return op(v)}) Factor\n  / Factor\n\nFactor \n  = (v:\"(\" {return bracket(v)}) Expr (v:\")\" {return bracket(v)})\n  / Integer\n\nInteger\n  = v:[0-9]+ {return int_(v)}\n`);\n\nfunction mapResult (value) {\n    if (\"map\" in value)\n        return <span>{value.map((v,i) => <span key={i}>{mapResult(v)}</span>)}</span>;\n    else {\n        const color = {\n            \"op\": \"red\",\n            \"bracket\": \"green\",\n            \"int\": \"blue\"\n        }[value.tag];\n        return <span style={{color}}>{value.v}</span>;\n    }\n}\nclass App extends Component {\n    constructor (props) {\n        super(props);\n        \n        this.state = {\n            value: \"1*(2+3)\",\n        };\n    }\n\n\n    handleChange ({target:{value}}) {\n        this.setState({ value });\n    }\n\n    render () {\n        var result = \"\";\n        try {\n            result = mapResult(parser.parse(this.state.value));\n        } catch (e) { \n            result = e.message;\n        }\n\n        return (\n            <div>\n                <Input type=\"text\" value={this.state.value} onChange={this.handleChange.bind(this)}/>\n                {result}\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}